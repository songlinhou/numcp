// Generated by Haxe 3.4.7
(function ($global) { "use strict";
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
var Main = function() { };
Main.__name__ = true;
Main.main = function() {
	Numcp.ones([3,4,5]);
	console.log(Numcp.array([[1,2,3],[4,5,6]]));
};
Math.__name__ = true;
var Ndarray = function(vec) {
	if(vec == null) {
		this.vec = [];
		return;
	}
	this.vec = vec;
	this._dim = this.getDimNumber();
	this.showFull = [];
	this._shape = this.getShape();
};
Ndarray.__name__ = true;
Ndarray.prototype = {
	toList: function() {
		return Reflect.copy(this.vec);
	}
	,shape: function() {
		return new Ndarray_$Int(this._shape);
	}
	,getSlicedIndex: function(slice_array) {
		var slices = [];
		var _g = 0;
		while(_g < slice_array.length) {
			var _range = slice_array[_g];
			++_g;
			if(StringTools.trim(_range) == ":") {
				slices.push([-1]);
			}
			var _int_range = _range.split(":");
			if(_int_range.length == 2) {
				var first = Std.parseInt(_int_range[0]);
				var second = Std.parseInt(_int_range[1]);
				if(first > second) {
					return [];
				}
				slices.push([first,second]);
			}
		}
		return slices;
	}
	,slice: function(slice_array) {
		var slices = this.getSlicedIndex(slice_array);
		var ret = this.vec;
		var _g1 = 0;
		var _g = slices.length;
		while(_g1 < _g) {
			var slice_range = slices[_g1++];
			if(slice_range != [-1]) {
				ret = ret.splice(slice_range[0],slice_range[1]);
				console.log("now ret=" + Std.string(ret));
			} else {
				console.log("keep as it is");
			}
		}
		return new Ndarray(ret);
	}
	,dim: function() {
		return this._dim;
	}
	,getDimNumber: function() {
		var str_presentation = "" + Std.string(this.vec);
		console.log(str_presentation);
		str_presentation = str_presentation.substring(0,str_presentation.indexOf("],"));
		var bracket_pos = str_presentation.indexOf("[");
		var dims = 0;
		while(bracket_pos >= 0) {
			++dims;
			str_presentation = str_presentation.substring(1);
			bracket_pos = str_presentation.indexOf("[");
		}
		return dims;
	}
	,getShape: function() {
		var dim_list = [];
		var subset = js_Boot.__cast(this.vec , Array);
		while(dim_list.length < this._dim) {
			var current_dim_length = subset.length;
			if(current_dim_length >= 200) {
				this.showFull.push(false);
			} else {
				this.showFull.push(true);
			}
			dim_list.push(current_dim_length);
			subset = subset[0];
		}
		return dim_list;
	}
	,toString: function() {
		var str = "\narray(" + Std.string(this.vec) + ")";
		var output = StringTools.replace(str,"]],[[","]],\n\t[[");
		output = StringTools.replace(str,"],[","],\n\t[");
		return output;
	}
	,__class__: Ndarray
};
var Ndarray_$Any = function(vec) {
	if(vec == null) {
		this.vec = [];
		return;
	}
	this.vec = vec;
	this._dim = this.getDimNumber();
	this.showFull = [];
	this._shape = this.getShape();
};
Ndarray_$Any.__name__ = true;
Ndarray_$Any.prototype = {
	toList: function() {
		return Reflect.copy(this.vec);
	}
	,shape: function() {
		return new Ndarray_$Int(this._shape);
	}
	,getSlicedIndex: function(slice_array) {
		var slices = [];
		var _g = 0;
		while(_g < slice_array.length) {
			var _range = slice_array[_g];
			++_g;
			if(StringTools.trim(_range) == ":") {
				slices.push([-1]);
			}
			var _int_range = _range.split(":");
			if(_int_range.length == 2) {
				var first = Std.parseInt(_int_range[0]);
				var second = Std.parseInt(_int_range[1]);
				if(first > second) {
					return [];
				}
				slices.push([first,second]);
			}
		}
		return slices;
	}
	,slice: function(slice_array) {
		var slices = this.getSlicedIndex(slice_array);
		var ret = this.vec;
		var _g1 = 0;
		var _g = slices.length;
		while(_g1 < _g) {
			var slice_range = slices[_g1++];
			if(slice_range != [-1]) {
				ret = ret.splice(slice_range[0],slice_range[1]);
				console.log("now ret=" + Std.string(ret));
			} else {
				console.log("keep as it is");
			}
		}
		return new Ndarray_$Any(ret);
	}
	,dim: function() {
		return this._dim;
	}
	,getDimNumber: function() {
		var str_presentation = "" + Std.string(this.vec);
		console.log(str_presentation);
		str_presentation = str_presentation.substring(0,str_presentation.indexOf("],"));
		var bracket_pos = str_presentation.indexOf("[");
		var dims = 0;
		while(bracket_pos >= 0) {
			++dims;
			str_presentation = str_presentation.substring(1);
			bracket_pos = str_presentation.indexOf("[");
		}
		return dims;
	}
	,getShape: function() {
		var dim_list = [];
		var subset = js_Boot.__cast(this.vec , Array);
		while(dim_list.length < this._dim) {
			var current_dim_length = subset.length;
			if(current_dim_length >= 200) {
				this.showFull.push(false);
			} else {
				this.showFull.push(true);
			}
			dim_list.push(current_dim_length);
			subset = subset[0];
		}
		return dim_list;
	}
	,toString: function() {
		var str = "\narray(" + Std.string(this.vec) + ")";
		var output = StringTools.replace(str,"]],[[","]],\n\t[[");
		output = StringTools.replace(str,"],[","],\n\t[");
		return output;
	}
	,__class__: Ndarray_$Any
};
var Ndarray_$Dynamic = function(vec) {
	if(vec == null) {
		this.vec = [];
		return;
	}
	this.vec = vec;
	this._dim = this.getDimNumber();
	this.showFull = [];
	this._shape = this.getShape();
};
Ndarray_$Dynamic.__name__ = true;
Ndarray_$Dynamic.prototype = {
	toList: function() {
		return Reflect.copy(this.vec);
	}
	,shape: function() {
		return new Ndarray_$Int(this._shape);
	}
	,getSlicedIndex: function(slice_array) {
		var slices = [];
		var _g = 0;
		while(_g < slice_array.length) {
			var _range = slice_array[_g];
			++_g;
			if(StringTools.trim(_range) == ":") {
				slices.push([-1]);
			}
			var _int_range = _range.split(":");
			if(_int_range.length == 2) {
				var first = Std.parseInt(_int_range[0]);
				var second = Std.parseInt(_int_range[1]);
				if(first > second) {
					return [];
				}
				slices.push([first,second]);
			}
		}
		return slices;
	}
	,slice: function(slice_array) {
		var slices = this.getSlicedIndex(slice_array);
		var ret = this.vec;
		var _g1 = 0;
		var _g = slices.length;
		while(_g1 < _g) {
			var slice_range = slices[_g1++];
			if(slice_range != [-1]) {
				ret = ret.splice(slice_range[0],slice_range[1]);
				console.log("now ret=" + Std.string(ret));
			} else {
				console.log("keep as it is");
			}
		}
		return new Ndarray_$Dynamic(ret);
	}
	,dim: function() {
		return this._dim;
	}
	,getDimNumber: function() {
		var str_presentation = "" + Std.string(this.vec);
		console.log(str_presentation);
		str_presentation = str_presentation.substring(0,str_presentation.indexOf("],"));
		var bracket_pos = str_presentation.indexOf("[");
		var dims = 0;
		while(bracket_pos >= 0) {
			++dims;
			str_presentation = str_presentation.substring(1);
			bracket_pos = str_presentation.indexOf("[");
		}
		return dims;
	}
	,getShape: function() {
		var dim_list = [];
		var subset = js_Boot.__cast(this.vec , Array);
		while(dim_list.length < this._dim) {
			var current_dim_length = subset.length;
			if(current_dim_length >= 200) {
				this.showFull.push(false);
			} else {
				this.showFull.push(true);
			}
			dim_list.push(current_dim_length);
			subset = subset[0];
		}
		return dim_list;
	}
	,toString: function() {
		var str = "\narray(" + Std.string(this.vec) + ")";
		var output = StringTools.replace(str,"]],[[","]],\n\t[[");
		output = StringTools.replace(str,"],[","],\n\t[");
		return output;
	}
	,__class__: Ndarray_$Dynamic
};
var Ndarray_$Int = function(vec) {
	if(vec == null) {
		this.vec = [];
		return;
	}
	this.vec = vec;
	this._dim = this.getDimNumber();
	this.showFull = [];
	this._shape = this.getShape();
};
Ndarray_$Int.__name__ = true;
Ndarray_$Int.prototype = {
	toList: function() {
		return Reflect.copy(this.vec);
	}
	,shape: function() {
		return new Ndarray_$Int(this._shape);
	}
	,getSlicedIndex: function(slice_array) {
		var slices = [];
		var _g = 0;
		while(_g < slice_array.length) {
			var _range = slice_array[_g];
			++_g;
			if(StringTools.trim(_range) == ":") {
				slices.push([-1]);
			}
			var _int_range = _range.split(":");
			if(_int_range.length == 2) {
				var first = Std.parseInt(_int_range[0]);
				var second = Std.parseInt(_int_range[1]);
				if(first > second) {
					return [];
				}
				slices.push([first,second]);
			}
		}
		return slices;
	}
	,slice: function(slice_array) {
		var slices = this.getSlicedIndex(slice_array);
		var ret = this.vec;
		var _g1 = 0;
		var _g = slices.length;
		while(_g1 < _g) {
			var slice_range = slices[_g1++];
			if(slice_range != [-1]) {
				ret = ret.splice(slice_range[0],slice_range[1]);
				console.log("now ret=" + Std.string(ret));
			} else {
				console.log("keep as it is");
			}
		}
		return new Ndarray_$Int(ret);
	}
	,dim: function() {
		return this._dim;
	}
	,getDimNumber: function() {
		var str_presentation = "" + Std.string(this.vec);
		console.log(str_presentation);
		str_presentation = str_presentation.substring(0,str_presentation.indexOf("],"));
		var bracket_pos = str_presentation.indexOf("[");
		var dims = 0;
		while(bracket_pos >= 0) {
			++dims;
			str_presentation = str_presentation.substring(1);
			bracket_pos = str_presentation.indexOf("[");
		}
		return dims;
	}
	,getShape: function() {
		var dim_list = [];
		var subset = js_Boot.__cast(this.vec , Array);
		while(dim_list.length < this._dim) {
			var current_dim_length = subset.length;
			if(current_dim_length >= 200) {
				this.showFull.push(false);
			} else {
				this.showFull.push(true);
			}
			dim_list.push(current_dim_length);
			subset = subset[0];
		}
		return dim_list;
	}
	,toString: function() {
		var str = "\narray(" + Std.string(this.vec) + ")";
		var output = StringTools.replace(str,"]],[[","]],\n\t[[");
		output = StringTools.replace(str,"],[","],\n\t[");
		return output;
	}
	,__class__: Ndarray_$Int
};
var Numcp = function() { };
Numcp.__name__ = true;
Numcp.array = function(vec) {
	return new Ndarray_$Any(vec);
};
Numcp.arrayWithSameElement = function(shape,element) {
	var dim = shape.length;
	shape.reverse();
	var _g = [];
	var _g2 = 0;
	var _g1 = shape[0];
	while(_g2 < _g1) {
		++_g2;
		_g.push(element);
	}
	var base = _g;
	var _g21 = 1;
	while(_g21 < dim) {
		var _g3 = [];
		var _g5 = 0;
		var _g4 = shape[_g21++];
		while(_g5 < _g4) {
			++_g5;
			_g3.push(base);
		}
		base = _g3;
	}
	return base;
};
Numcp.createElementRecursive = function() {
};
Numcp.zeros = function(shape) {
	return new Ndarray_$Dynamic(Numcp.arrayWithSameElement(shape,0));
};
Numcp.ones = function(shape) {
	return new Ndarray_$Dynamic(Numcp.arrayWithSameElement(shape,1.0));
};
Numcp.all = function(array_like) {
	if(!((array_like instanceof Array) && array_like.__enum__ == null)) {
		js_Boot.__instanceof(array_like,Ndarray);
	}
};
Numcp.all_nadarray = function(array) {
	array.shape();
	while(true) break;
};
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.copy = function(o) {
	var o2 = { };
	var _g = 0;
	var _g1 = Reflect.fields(o);
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		o2[f] = Reflect.field(o,f);
	}
	return o2;
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var Utils = function() { };
Utils.__name__ = true;
Utils.print = function(content) {
	console.log(content);
};
Utils.println = function(content) {
	console.log(content + "\n");
};
Utils.isNumber = function(param) {
	if(typeof(param) == "number" && ((param | 0) === param)) {
		return true;
	} else if(typeof(param) == "number") {
		return true;
	}
	return false;
};
Utils.isArray = function(param) {
	if((param instanceof Array)) {
		return param.__enum__ == null;
	} else {
		return false;
	}
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = intf[_g1++];
			if(i == cl || js_Boot.__interfLoop(i,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
js_Boot.__toStr = ({ }).toString;
Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
